{"ast":null,"code":"/**\r\n * A complete Coordinate Pair consisting of a latitude and longitude\r\n * @typedef {Object} CoordinatePair\r\n * @property {number} longitude - longitude coordinate\r\n * @property {number} latitude - latitude coordinate\r\n */\n\n/**\r\n * Generates a GeoJSON FeatureCollection of random points based on\r\n * the center coordinates passed in.\r\n * @param {CoordinatePair} centerCoordinates - the {@link CoordinatePair} for the map center\r\n * @return {results} GeoJSON FeatureCollection\r\n */\nconst fetchFakeData = centerCoordinates => {\n  const newFeaturesList = [];\n\n  for (let i = 0; i < 20; i++) {\n    const id = i;\n    const {\n      longitude,\n      latitude\n    } = getRandomCoordinate(centerCoordinates);\n    newFeaturesList.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [longitude, latitude]\n      },\n      properties: {\n        id,\n        name: `Random Point #${id}`,\n        description: `description for Random Point #${id}`\n      }\n    });\n  }\n\n  return Promise.resolve({\n    type: \"FeatureCollection\",\n    features: newFeaturesList\n  });\n};\n/**\r\n * Generates a random point within 0.025 radius of map center coordinates.\r\n * @param {CoordinatePair} centerCoordinates - the {@link CoordinatePair} for the map center\r\n * @return {CoordinatePair} randomly generated coordinate pair\r\n */\n\n\nconst getRandomCoordinate = ({\n  longitude: centerLon,\n  latitude: centerLat\n}) => {\n  const r = 0.025 * Math.sqrt(Math.random());\n  const theta = Math.random() * 2 * Math.PI;\n  const latitude = centerLat + r * Math.cos(theta);\n  const longitude = centerLon + r * Math.sin(theta);\n  return {\n    longitude,\n    latitude\n  };\n};\n\nexport default fetchFakeData;","map":{"version":3,"sources":["C:/Users/lianne/mygit/react-mapbox-example/src/api/fetchFakeData.js"],"names":["fetchFakeData","centerCoordinates","newFeaturesList","i","id","longitude","latitude","getRandomCoordinate","push","type","geometry","coordinates","properties","name","description","Promise","resolve","features","centerLon","centerLat","r","Math","sqrt","random","theta","PI","cos","sin"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,aAAa,GAAGC,iBAAiB,IAAI;AACzC,QAAMC,eAAe,GAAG,EAAxB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAMC,EAAE,GAAGD,CAAX;AACA,UAAM;AAAEE,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA0BC,mBAAmB,CAACN,iBAAD,CAAnD;AACAC,IAAAA,eAAe,CAACM,IAAhB,CAAqB;AACnBC,MAAAA,IAAI,EAAE,SADa;AAEnBC,MAAAA,QAAQ,EAAE;AACRD,QAAAA,IAAI,EAAE,OADE;AAERE,QAAAA,WAAW,EAAE,CAACN,SAAD,EAAYC,QAAZ;AAFL,OAFS;AAMnBM,MAAAA,UAAU,EAAE;AACVR,QAAAA,EADU;AAEVS,QAAAA,IAAI,EAAG,iBAAgBT,EAAG,EAFhB;AAGVU,QAAAA,WAAW,EAAG,iCAAgCV,EAAG;AAHvC;AANO,KAArB;AAYD;;AAED,SAAOW,OAAO,CAACC,OAAR,CAAgB;AACrBP,IAAAA,IAAI,EAAE,mBADe;AAErBQ,IAAAA,QAAQ,EAAEf;AAFW,GAAhB,CAAP;AAID,CAvBD;AAyBA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,mBAAmB,GAAG,CAAC;AAAEF,EAAAA,SAAS,EAAEa,SAAb;AAAwBZ,EAAAA,QAAQ,EAAEa;AAAlC,CAAD,KAAmD;AAC7E,QAAMC,CAAC,GAAG,QAAQC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,EAAV,CAAlB;AACA,QAAMC,KAAK,GAAGH,IAAI,CAACE,MAAL,KAAgB,CAAhB,GAAoBF,IAAI,CAACI,EAAvC;AACA,QAAMnB,QAAQ,GAAGa,SAAS,GAAGC,CAAC,GAAGC,IAAI,CAACK,GAAL,CAASF,KAAT,CAAjC;AACA,QAAMnB,SAAS,GAAGa,SAAS,GAAGE,CAAC,GAAGC,IAAI,CAACM,GAAL,CAASH,KAAT,CAAlC;AACA,SAAO;AAAEnB,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAP;AACD,CAND;;AAQA,eAAeN,aAAf","sourcesContent":["/**\r\n * A complete Coordinate Pair consisting of a latitude and longitude\r\n * @typedef {Object} CoordinatePair\r\n * @property {number} longitude - longitude coordinate\r\n * @property {number} latitude - latitude coordinate\r\n */\r\n\r\n/**\r\n * Generates a GeoJSON FeatureCollection of random points based on\r\n * the center coordinates passed in.\r\n * @param {CoordinatePair} centerCoordinates - the {@link CoordinatePair} for the map center\r\n * @return {results} GeoJSON FeatureCollection\r\n */\r\nconst fetchFakeData = centerCoordinates => {\r\n  const newFeaturesList = [];\r\n  for (let i = 0; i < 20; i++) {\r\n    const id = i;\r\n    const { longitude, latitude } = getRandomCoordinate(centerCoordinates);\r\n    newFeaturesList.push({\r\n      type: \"Feature\",\r\n      geometry: {\r\n        type: \"Point\",\r\n        coordinates: [longitude, latitude]\r\n      },\r\n      properties: {\r\n        id,\r\n        name: `Random Point #${id}`,\r\n        description: `description for Random Point #${id}`\r\n      }\r\n    });\r\n  }\r\n\r\n  return Promise.resolve({\r\n    type: \"FeatureCollection\",\r\n    features: newFeaturesList\r\n  });\r\n};\r\n\r\n/**\r\n * Generates a random point within 0.025 radius of map center coordinates.\r\n * @param {CoordinatePair} centerCoordinates - the {@link CoordinatePair} for the map center\r\n * @return {CoordinatePair} randomly generated coordinate pair\r\n */\r\nconst getRandomCoordinate = ({ longitude: centerLon, latitude: centerLat }) => {\r\n  const r = 0.025 * Math.sqrt(Math.random());\r\n  const theta = Math.random() * 2 * Math.PI;\r\n  const latitude = centerLat + r * Math.cos(theta);\r\n  const longitude = centerLon + r * Math.sin(theta);\r\n  return { longitude, latitude };\r\n};\r\n\r\nexport default fetchFakeData;\r\n"]},"metadata":{},"sourceType":"module"}