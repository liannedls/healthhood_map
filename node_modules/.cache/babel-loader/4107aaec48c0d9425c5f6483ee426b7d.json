{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lianne\\\\mygit\\\\react-mapbox-example\\\\src\\\\App.js\";\nimport ReactDOM from \"react-dom\";\nimport React, { useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport fetchFakeData from \"./api/fetchFakeData\";\nimport Popup from \"./components/Popup\";\nimport \"./App.css\";\nimport GeoJsonVal from \"./api/GeoJson.json\";\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\nconst App = () => {\n  const mapContainerRef = useRef(null);\n  const popUpRef = useRef(new mapboxgl.Popup({\n    offset: 15\n  })); // initialize map when component mounts\n\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      // See style options here: https://docs.mapbox.com/api/maps/#styles\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      //center: [-75.415, 45.244,],\n      zoom: 12.5,\n      maxBounds: [[-74.94728500751165, 45.18392799015035], // Southwest coordinates\n      [-75.91058699000139, 45.97764500765852] // Northeast coordinates\n      ]\n    }); // add navigation control (zoom buttons)\n\n    map.addControl(new mapboxgl.NavigationControl(), \"bottom-right\");\n    map.on(\"load\", () => {\n      // add the data source for new a feature collection with no features\n      map.addSource(\"random-points-data\", {\n        type: \"geojson\",\n        data: {\n          type: \"FeatureCollection\",\n          features: []\n        }\n      }); // now add the layer, and reference the data source above by name\n\n      map.addLayer({\n        id: \"random-points-layer\",\n        source: \"random-points-data\",\n        type: \"symbol\",\n        layout: {\n          // full list of icons here: https://labs.mapbox.com/maki-icons\n          \"icon-image\": \"bakery-15\",\n          // this will put little croissants on our map\n          \"icon-padding\": 0,\n          \"icon-allow-overlap\": true\n        }\n      });\n    });\n    map.on(\"moveend\", async () => {\n      // get new center coordinates\n      const {\n        lng,\n        lat\n      } = map.getCenter(); // fetch new data\n\n      const results = await fetchFakeData({\n        longitude: lng,\n        latitude: lat\n      }); // update \"random-points-data\" source with new data\n      // all layers that consume the \"random-points-data\" data source will be updated automatically\n      //map.getSource(\"random-points-data\").setData(GeoJsonVal);\n    }); // change cursor to pointer when user hovers over a clickable feature\n\n    map.on(\"mouseenter\", \"random-points-layer\", e => {\n      if (e.features.length) {\n        map.getCanvas().style.cursor = \"pointer\";\n      }\n    }); // reset cursor to default when user is no longer hovering over a clickable feature\n\n    map.on(\"mouseleave\", \"random-points-layer\", () => {\n      map.getCanvas().style.cursor = \"\";\n    }); // add popup when user clicks a point\n\n    map.on(\"click\", \"random-points-layer\", e => {\n      if (e.features.length) {\n        const feature = e.features[0]; // create popup node\n\n        const popupNode = document.createElement(\"div\");\n        ReactDOM.render( /*#__PURE__*/React.createElement(Popup, {\n          feature: feature,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }\n        }), popupNode); // set popup on map\n\n        popUpRef.current.setLngLat(feature.geometry.coordinates).setDOMContent(popupNode).addTo(map);\n      }\n    }); // clean up on unmount\n\n    return () => map.remove();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-container\",\n    ref: mapContainerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/lianne/mygit/react-mapbox-example/src/App.js"],"names":["ReactDOM","React","useRef","useEffect","mapboxgl","fetchFakeData","Popup","GeoJsonVal","accessToken","process","env","REACT_APP_MAPBOX_ACCESS_TOKEN","App","mapContainerRef","popUpRef","offset","map","Map","container","current","style","zoom","maxBounds","addControl","NavigationControl","on","addSource","type","data","features","addLayer","id","source","layout","lng","lat","getCenter","results","longitude","latitude","e","length","getCanvas","cursor","feature","popupNode","document","createElement","render","setLngLat","geometry","coordinates","setDOMContent","addTo","remove"],"mappings":"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","sourcesContent":["import ReactDOM from \"react-dom\";\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\n\r\nimport fetchFakeData from \"./api/fetchFakeData\";\r\nimport Popup from \"./components/Popup\";\r\nimport \"./App.css\";\r\nimport GeoJsonVal from \"./api/GeoJson.json\";\r\n\r\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\r\n\r\nconst App = () => {\r\n  const mapContainerRef = useRef(null);\r\n  const popUpRef = useRef(new mapboxgl.Popup({ offset: 15 }));\r\n\r\n  // initialize map when component mounts\r\n  useEffect(() => {\r\n    const map = new mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      // See style options here: https://docs.mapbox.com/api/maps/#styles\r\n      style: \"mapbox://styles/mapbox/streets-v11\",\r\n      //center: [-75.415, 45.244,],\r\n      zoom: 12.5,\r\n\r\n        maxBounds: [\r\n          [-74.94728500751165, 45.18392799015035], // Southwest coordinates\r\n          [-75.91058699000139, 45.97764500765852] // Northeast coordinates\r\n          ]\r\n    });\r\n\r\n    // add navigation control (zoom buttons)\r\n    map.addControl(new mapboxgl.NavigationControl(), \"bottom-right\");\r\n\r\n    map.on(\"load\", () => {\r\n      // add the data source for new a feature collection with no features\r\n      map.addSource(\"random-points-data\", {\r\n        type: \"geojson\",\r\n        data: {\r\n          type: \"FeatureCollection\",\r\n          features: []\r\n        }\r\n      });\r\n      // now add the layer, and reference the data source above by name\r\n      map.addLayer({\r\n        id: \"random-points-layer\",\r\n        source: \"random-points-data\",\r\n        type: \"symbol\",\r\n        layout: {\r\n          // full list of icons here: https://labs.mapbox.com/maki-icons\r\n          \"icon-image\": \"bakery-15\", // this will put little croissants on our map\r\n          \"icon-padding\": 0,\r\n          \"icon-allow-overlap\": true\r\n        }\r\n      });\r\n    });\r\n\r\n    map.on(\"moveend\", async () => {\r\n      // get new center coordinates\r\n      const { lng, lat } = map.getCenter();\r\n      // fetch new data\r\n      const results = await fetchFakeData({ longitude: lng, latitude: lat });\r\n      // update \"random-points-data\" source with new data\r\n      // all layers that consume the \"random-points-data\" data source will be updated automatically\r\n      //map.getSource(\"random-points-data\").setData(GeoJsonVal);\r\n    });\r\n\r\n    // change cursor to pointer when user hovers over a clickable feature\r\n    map.on(\"mouseenter\", \"random-points-layer\", e => {\r\n      if (e.features.length) {\r\n        map.getCanvas().style.cursor = \"pointer\";\r\n      }\r\n    });\r\n\r\n    // reset cursor to default when user is no longer hovering over a clickable feature\r\n    map.on(\"mouseleave\", \"random-points-layer\", () => {\r\n      map.getCanvas().style.cursor = \"\";\r\n    });\r\n\r\n    // add popup when user clicks a point\r\n    map.on(\"click\", \"random-points-layer\", e => {\r\n      if (e.features.length) {\r\n        const feature = e.features[0];\r\n        // create popup node\r\n        const popupNode = document.createElement(\"div\");\r\n        ReactDOM.render(<Popup feature={feature} />, popupNode);\r\n        // set popup on map\r\n        popUpRef.current\r\n          .setLngLat(feature.geometry.coordinates)\r\n          .setDOMContent(popupNode)\r\n          .addTo(map);\r\n      }\r\n    });\r\n\r\n    // clean up on unmount\r\n    return () => map.remove();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return <div className=\"map-container\" ref={mapContainerRef} />;\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}